{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport contains from \"rc-util/es/Dom/contains\";\nimport Animate from 'rc-animate';\nimport LazyRenderBox from './LazyRenderBox';\nvar uuid = 0;\n/* eslint react/no-is-mounted:0 */\n\nfunction getScroll(w, top) {\n  var ret = w[\"page\".concat(top ? 'Y' : 'X', \"Offset\")];\n  var method = \"scroll\".concat(top ? 'Top' : 'Left');\n\n  if (typeof ret !== 'number') {\n    var d = w.document;\n    ret = d.documentElement[method];\n\n    if (typeof ret !== 'number') {\n      ret = d.body[method];\n    }\n  }\n\n  return ret;\n}\n\nfunction setTransformOrigin(node, value) {\n  var style = node.style;\n  ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {\n    style[\"\".concat(prefix, \"TransformOrigin\")] = value;\n  });\n  style.transformOrigin = value;\n}\n\nfunction offset(el) {\n  var rect = el.getBoundingClientRect();\n  var pos = {\n    left: rect.left,\n    top: rect.top\n  };\n  var doc = el.ownerDocument;\n  var w = doc.defaultView || doc.parentWindow;\n  pos.left += getScroll(w);\n  pos.top += getScroll(w, true);\n  return pos;\n}\n\nvar Dialog = /*#__PURE__*/function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  var _super = _createSuper(Dialog);\n\n  function Dialog(props) {\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    _this = _super.call(this, props);\n    _this.inTransition = false;\n\n    _this.onAnimateLeave = function () {\n      var _this$props = _this.props,\n          afterClose = _this$props.afterClose,\n          getOpenCount = _this$props.getOpenCount,\n          focusTriggerAfterClose = _this$props.focusTriggerAfterClose,\n          mask = _this$props.mask; // need demo?\n      // https://github.com/react-component/dialog/pull/28\n\n      if (_this.wrap) {\n        _this.wrap.style.display = 'none';\n      }\n\n      _this.inTransition = false; // 如果没有打开的状态，则清除 effect 和 overflow: hidden;\n      // https://github.com/ant-design/ant-design/issues/21539\n\n      if (!getOpenCount()) {\n        _this.switchScrollingEffect();\n      }\n\n      if (mask && _this.lastOutSideFocusNode && focusTriggerAfterClose) {\n        try {\n          _this.lastOutSideFocusNode.focus({\n            preventScroll: true\n          });\n        } catch (e) {\n          _this.lastOutSideFocusNode = null;\n        }\n\n        _this.lastOutSideFocusNode = null;\n      }\n\n      if (afterClose) {\n        afterClose();\n      }\n    };\n\n    _this.onDialogMouseDown = function () {\n      _this.dialogMouseDown = true;\n    };\n\n    _this.onMaskMouseUp = function () {\n      if (_this.dialogMouseDown) {\n        _this.timeoutId = setTimeout(function () {\n          _this.dialogMouseDown = false;\n        }, 0);\n      }\n    };\n\n    _this.onMaskClick = function (e) {\n      // android trigger click on open (fastclick??)\n      if (Date.now() - _this.openTime < 300) {\n        return;\n      }\n\n      if (e.target === e.currentTarget && !_this.dialogMouseDown) {\n        _this.close(e);\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$props2 = _this.props,\n          keyboard = _this$props2.keyboard,\n          visible = _this$props2.visible;\n\n      if (keyboard && e.keyCode === KeyCode.ESC) {\n        e.stopPropagation();\n\n        _this.close(e);\n\n        return;\n      } // keep focus inside dialog\n\n\n      if (visible) {\n        if (e.keyCode === KeyCode.TAB) {\n          var _document = document,\n              activeElement = _document.activeElement;\n\n          if (e.shiftKey) {\n            if (activeElement === _this.sentinelStart) {\n              _this.sentinelEnd.focus();\n            }\n          } else if (activeElement === _this.sentinelEnd) {\n            _this.sentinelStart.focus();\n          }\n        }\n      }\n    };\n\n    _this.getDialogElement = function () {\n      var _this$props3 = _this.props,\n          closable = _this$props3.closable,\n          prefixCls = _this$props3.prefixCls,\n          width = _this$props3.width,\n          height = _this$props3.height,\n          footer = _this$props3.footer,\n          title = _this$props3.title,\n          closeIcon = _this$props3.closeIcon,\n          style = _this$props3.style,\n          className = _this$props3.className,\n          visible = _this$props3.visible,\n          forceRender = _this$props3.forceRender,\n          bodyStyle = _this$props3.bodyStyle,\n          bodyProps = _this$props3.bodyProps,\n          children = _this$props3.children,\n          destroyOnClose = _this$props3.destroyOnClose;\n      var dest = {};\n\n      if (width !== undefined) {\n        dest.width = width;\n      }\n\n      if (height !== undefined) {\n        dest.height = height;\n      }\n\n      var footerNode;\n\n      if (footer) {\n        footerNode = React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-footer\"),\n          ref: _this.saveRef('footer')\n        }, footer);\n      }\n\n      var headerNode;\n\n      if (title) {\n        headerNode = React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-header\"),\n          ref: _this.saveRef('header')\n        }, React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-title\"),\n          id: _this.titleId\n        }, title));\n      }\n\n      var closer;\n\n      if (closable) {\n        closer = React.createElement(\"button\", {\n          type: \"button\",\n          onClick: _this.close,\n          \"aria-label\": \"Close\",\n          className: \"\".concat(prefixCls, \"-close\")\n        }, closeIcon || React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-close-x\")\n        }));\n      }\n\n      var styleBox = _objectSpread(_objectSpread({}, style), dest);\n\n      var sentinelStyle = {\n        width: 0,\n        height: 0,\n        overflow: 'hidden',\n        outline: 'none'\n      };\n\n      var transitionName = _this.getTransitionName();\n\n      var dialogElement = React.createElement(LazyRenderBox, {\n        key: \"dialog-element\",\n        role: \"document\",\n        ref: _this.saveRef('dialog'),\n        style: styleBox,\n        className: \"\".concat(prefixCls, \" \").concat(className || ''),\n        visible: visible,\n        forceRender: forceRender,\n        onMouseDown: _this.onDialogMouseDown\n      }, React.createElement(\"div\", {\n        tabIndex: 0,\n        ref: _this.saveRef('sentinelStart'),\n        style: sentinelStyle,\n        \"aria-hidden\": \"true\"\n      }), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-content\")\n      }, closer, headerNode, React.createElement(\"div\", Object.assign({\n        className: \"\".concat(prefixCls, \"-body\"),\n        style: bodyStyle,\n        ref: _this.saveRef('body')\n      }, bodyProps), children), footerNode), React.createElement(\"div\", {\n        tabIndex: 0,\n        ref: _this.saveRef('sentinelEnd'),\n        style: sentinelStyle,\n        \"aria-hidden\": \"true\"\n      }));\n      return React.createElement(Animate, {\n        key: \"dialog\",\n        showProp: \"visible\",\n        onLeave: _this.onAnimateLeave,\n        transitionName: transitionName,\n        component: \"\",\n        transitionAppear: true\n      }, visible || !destroyOnClose ? dialogElement : null);\n    };\n\n    _this.getZIndexStyle = function () {\n      var style = {};\n      var zIndex = _this.props.zIndex;\n\n      if (zIndex !== undefined) {\n        style.zIndex = zIndex;\n      }\n\n      return style;\n    };\n\n    _this.getWrapStyle = function () {\n      return _objectSpread(_objectSpread({}, _this.getZIndexStyle()), _this.props.wrapStyle);\n    };\n\n    _this.getMaskStyle = function () {\n      return _objectSpread(_objectSpread({}, _this.getZIndexStyle()), _this.props.maskStyle);\n    };\n\n    _this.getMaskElement = function () {\n      var _this$props4 = _this.props,\n          mask = _this$props4.mask,\n          prefixCls = _this$props4.prefixCls,\n          visible = _this$props4.visible,\n          maskProps = _this$props4.maskProps;\n      var maskElement;\n\n      if (mask) {\n        var maskTransition = _this.getMaskTransitionName();\n\n        maskElement = React.createElement(LazyRenderBox, Object.assign({\n          style: _this.getMaskStyle(),\n          key: \"mask\",\n          className: \"\".concat(prefixCls, \"-mask\"),\n          hiddenClassName: \"\".concat(prefixCls, \"-mask-hidden\"),\n          visible: visible\n        }, maskProps));\n\n        if (maskTransition) {\n          maskElement = React.createElement(Animate, {\n            key: \"mask\",\n            showProp: \"visible\",\n            transitionAppear: true,\n            component: \"\",\n            transitionName: maskTransition\n          }, maskElement);\n        }\n      }\n\n      return maskElement;\n    };\n\n    _this.getMaskTransitionName = function () {\n      var _this$props5 = _this.props,\n          maskTransitionName = _this$props5.maskTransitionName,\n          maskAnimation = _this$props5.maskAnimation,\n          prefixCls = _this$props5.prefixCls;\n      var transitionName = maskTransitionName;\n      var animation = maskAnimation;\n\n      if (!transitionName && animation) {\n        transitionName = \"\".concat(prefixCls, \"-\").concat(animation);\n      }\n\n      return transitionName;\n    };\n\n    _this.getTransitionName = function () {\n      var _this$props6 = _this.props,\n          transitionName = _this$props6.transitionName,\n          animation = _this$props6.animation,\n          prefixCls = _this$props6.prefixCls;\n      var transitionNameResult = transitionName;\n\n      if (!transitionName && animation) {\n        transitionNameResult = \"\".concat(prefixCls, \"-\").concat(animation);\n      }\n\n      return transitionNameResult;\n    };\n\n    _this.close = function (e) {\n      var onClose = _this.props.onClose;\n\n      if (onClose) {\n        onClose(e);\n      }\n    };\n\n    _this.saveRef = function (name) {\n      return function (node) {\n        _this[name] = node;\n      };\n    };\n\n    _this.titleId = \"rcDialogTitle\".concat(uuid);\n    uuid += 1;\n\n    _this.switchScrollingEffect = props.switchScrollingEffect || function () {};\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidUpdate({}); // if forceRender is true, set element style display to be none;\n\n      if (this.props.forceRender && this.props.visible) {\n        return;\n      }\n\n      if ((this.props.forceRender || this.props.getContainer === false && !this.props.visible) && this.wrap) {\n        this.wrap.style.display = 'none';\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var visible = this.props.visible;\n      var mousePosition = this.props.mousePosition;\n\n      if (visible) {\n        // first show\n        if (!prevProps.visible) {\n          this.openTime = Date.now();\n          this.switchScrollingEffect();\n          this.tryFocus(); // eslint-disable-next-line react/no-find-dom-node\n\n          var dialogNode = ReactDOM.findDOMNode(this.dialog);\n\n          if (mousePosition) {\n            var elOffset = offset(dialogNode);\n            setTransformOrigin(dialogNode, \"\".concat(mousePosition.x - elOffset.left, \"px \").concat(mousePosition.y - elOffset.top, \"px\"));\n          } else {\n            setTransformOrigin(dialogNode, '');\n          }\n        }\n      } else if (prevProps.visible) {\n        this.inTransition = true;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props7 = this.props,\n          visible = _this$props7.visible,\n          getOpenCount = _this$props7.getOpenCount;\n\n      if ((visible || this.inTransition) && !getOpenCount()) {\n        this.switchScrollingEffect();\n      }\n\n      clearTimeout(this.timeoutId);\n    }\n  }, {\n    key: \"tryFocus\",\n    value: function tryFocus() {\n      if (!contains(this.wrap, document.activeElement)) {\n        this.lastOutSideFocusNode = document.activeElement;\n        this.sentinelStart.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var prefixCls = props.prefixCls,\n          maskClosable = props.maskClosable;\n      var style = this.getWrapStyle(); // clear hide display\n      // and only set display after async anim, not here for hide\n\n      if (props.visible) {\n        style.display = null;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-root\")\n      }, this.getMaskElement(), React.createElement(\"div\", Object.assign({\n        tabIndex: -1,\n        onKeyDown: this.onKeyDown,\n        className: \"\".concat(prefixCls, \"-wrap \").concat(props.wrapClassName || ''),\n        ref: this.saveRef('wrap'),\n        onClick: maskClosable ? this.onMaskClick : null,\n        onMouseUp: maskClosable ? this.onMaskMouseUp : null,\n        role: \"dialog\",\n        \"aria-labelledby\": props.title ? this.titleId : null,\n        style: style\n      }, props.wrapProps), this.getDialogElement()));\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nexport { Dialog as default };\nDialog.defaultProps = {\n  className: '',\n  mask: true,\n  visible: false,\n  keyboard: true,\n  closable: true,\n  maskClosable: true,\n  destroyOnClose: false,\n  prefixCls: 'rc-dialog',\n  focusTriggerAfterClose: true\n};","map":null,"metadata":{},"sourceType":"module"}